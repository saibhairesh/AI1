# -*- coding: utf-8 -*-
"""Task1_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14R4aKqn0SXGHlCsSFEMJylgGxemeVh7K
"""

import matplotlib.pyplot as plt
import networkx as nx

# Create a directed graph
workflow_graph = nx.DiGraph()

# Define nodes and their descriptions
nodes = {
    "User Query": "Initial User Input",
    "Plan Agent": "Splits user query into sub-tasks",
    "Task Solver": "Refines and solves tasks",
    "Feedback Loop": "Collects user feedback on solutions",
    "Output": "Final results of the completed tasks"
}

# Add nodes to the graph
for node, description in nodes.items():
    workflow_graph.add_node(node, description=description)

# Define edges between nodes
edges = [
    ("User Query", "Plan Agent"),  # Submits Query
    ("Plan Agent", "Task Solver"),  # Generates Tasks
    ("Task Solver", "Feedback Loop"),  # Sends Solutions
    ("Feedback Loop", "Task Solver"),  # Refines Tasks (if needed)
    ("Task Solver", "Output")  # Outputs Final Results
]

# Add edges to the graph
workflow_graph.add_edges_from(edges)

# Draw the graph
pos = nx.spring_layout(workflow_graph)  # positions for all nodes
nx.draw(workflow_graph, pos, with_labels=True, node_size=3000, node_color="lightblue", font_size=10, font_color="black", font_weight="bold", arrowstyle='-|>', arrowsize=20)

# Draw labels with descriptions
labels = nx.get_node_attributes(workflow_graph, 'description')
label_pos = {k: (v[0], v[1] + 0.1) for k, v in pos.items()}  # Offset the labels slightly
nx.draw_networkx_labels(workflow_graph, label_pos, labels, font_size=8, verticalalignment='bottom')

# Show the plot
plt.title("Agentic Workflow Graph")
plt.show()

